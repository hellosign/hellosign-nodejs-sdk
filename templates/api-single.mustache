{{>licenseInfo}}

import axios, { AxiosError, AxiosRequestConfig } from 'axios';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
{{#hasAuthMethods}}
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';
{{/hasAuthMethods}}

import { HttpError, optionsI, returnTypeT, returnTypeI, generateFormData, toFormData, queryParamsSerializer } from './apis';

let defaultBasePath = '{{{basePath}}}';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    /**
     * Allows instantiating files when using ObjectSerializer::deserialize()
     * @param bool
     */
    protected _instantiateFiles = false;

    /**
     * Define the base location to look for file uploads
     * @param path
     */
    protected _rootFilePath?: string;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}
        '{{name}}': new HttpBasicAuth(),
{{/isBasicBasic}}
{{#isBasicBearer}}
        '{{name}}': new HttpBearerAuth(),
{{/isBasicBearer}}
{{#isApiKey}}
        '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}}{{#isKeyInCookie}}'cookie'{{/isKeyInCookie}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: string) {
        this.authentications.api_key.username = key;
    }
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}

    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasicBasic}}
{{#isBasicBearer}}

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.{{name}}.accessToken = accessToken;
    }
{{/isBasicBearer}}
{{#isOAuth}}

    set accessToken(token: string) {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    set instantiateFiles(flag: boolean) {
      this._instantiateFiles = flag;
    }

    set rootFilePath(path: string | undefined) {
      this._rootFilePath = path;
    }

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     * @param options
     */
    public async {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: optionsI = {headers: {}}) : Promise<{{#returnType}}returnTypeT<{{{.}}}>{{/returnType}}{{^returnType}}returnTypeI{{/returnType}}> {
        const localVarPath = this.basePath + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
{{#hasProduces}}
        const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams['content-type'] = 'application/json';
        } else {
            localVarHeaderParams['content-type'] = produces.join(",");
        }
{{/hasProduces}}
        let localVarFormParams: any = {};
        let localVarBodyParams: any = undefined;

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }

{{/queryParams}}
{{#headerParams}}
        localVarHeaderParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
{{/headerParams}}
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}

        {{#bodyParam}}
        const result = generateFormData({{{paramName}}}, {{{dataType}}}.attributeTypeMap, this._instantiateFiles, this._rootFilePath,);
        localVarUseFormData = result.localVarUseFormData;

        let data = {};
        if (localVarUseFormData) {
          const formData = toFormData(result.data);
          data = formData;
          localVarHeaderParams = {
            ...localVarHeaderParams,
            ...formData.getHeaders(),
          };
        } else {
          data = ObjectSerializer.serialize(
            {{paramName}},
            "{{{dataType}}}"
          );
        }
        {{/bodyParam}}

        let localVarRequestOptions: AxiosRequestConfig = {
            method: '{{httpMethod}}',
            params: localVarQueryParameters,
            headers: localVarHeaderParams,
            url: localVarPath,
            paramsSerializer: this._useQuerystring ? queryParamsSerializer : undefined,
{{^isResponseFile}}
            responseType: "json",
{{/isResponseFile}}
{{#isResponseFile}}
            responseEncoding: "binary",
{{/isResponseFile}}
{{#bodyParam}}
            data,
{{/bodyParam}}
        };

        let authenticationPromise = Promise.resolve();
{{#authMethods}}
    {{#isApiKey}}
        if (this.authentications.{{name}}.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isApiKey}}
    {{#isBasicBasic}}
        if (this.authentications.{{name}}.username) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isBasicBearer}}
    {{#isOAuth}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(localVarRequestOptions));
        }
    {{/isOAuth}}
{{/authMethods}}
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            return new Promise<{{#returnType}}returnTypeT<{{{.}}}>{{/returnType}}{{^returnType}}returnTypeI{{/returnType}}>((resolve, reject) => {
                axios.request(localVarRequestOptions)
                    .then((response) => {
                        let body = response.data;

                        if (response.status && response.status >= 200 && response.status <= 299) {
                            {{#returnType}}
                            body = ObjectSerializer.deserialize(body, "{{{.}}}");
                            {{/returnType}}
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.status));
                        }
                    }, (error: AxiosError) => {
                        if (error.response == null) {
                            reject(error);
                            return;
                        }

                        const response = error.response;

                        let body;

                        {{#returnType}}

                        {{#responses}}
                        {{#dataType}}
                        {{^isWildcard}}
                        {{^isRange}}
                        if (response.status === {{code}}) {
                            body = ObjectSerializer.deserialize(
                                response.data,
                                "{{{dataType}}}"
                            );

                            reject(new HttpError(response, body, response.status));
                            return;
                        }
                        {{/isRange}}
                        {{/isWildcard}}
                        {{/dataType}}
                        {{/responses}}

                        {{#responses}}
                        {{#dataType}}
                        {{#isRange}}
                        let rangeCodeLeft = Number("{{code}}"[0] + "00");
                        let rangeCodeRight = Number("{{code}}"[0] + "99");
                        if (response.status >= rangeCodeLeft && response.status <= rangeCodeRight) {
                            body = ObjectSerializer.deserialize(
                                response.data,
                                "{{{dataType}}}"
                            );

                            reject(new HttpError(response, body, response.status));
                            return;
                        }
                        {{/isRange}}
                        {{/dataType}}
                        {{/responses}}

                        {{#responses}}
                        {{#dataType}}
                        {{#isWildcard}}
                        body = ObjectSerializer.deserialize(
                            response.data.error,
                            "{{{dataType}}}"
                        );

                        reject(new HttpError(response, response.data, response.status));
                        return;
                        {{/isWildcard}}
                        {{/dataType}}
                        {{/responses}}

                        {{/returnType}}
                    });
            });
        });
    }
{{/operation}}
}
{{/operations}}
